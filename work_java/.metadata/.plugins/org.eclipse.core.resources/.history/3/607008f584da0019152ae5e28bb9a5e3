package argorithm3;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Prim_pq {
	static ArrayList<Node>[] adj;
	static int N, K;

	static class Node implements Comparable<Node> {
		int dic;
		int cost;

		Node(int dic, int cost) {
			this.dic = dic;
			this.cost = cost;
		}

		@Override
		public String toString() {
			return "Node [dic=" + dic + ", cost=" + cost + "]";
		}

		@Override
		public int compareTo(Node o) {
			return Integer.compare(this.cost, o.cost);
		}
	}

	public static void main(String[] args) throws IOException {
		String input = "7 11\n" + "0 1 31\r\n" + "0 2 31\r\n" + "0 6 31\r\n" + "0 5 60\r\n" + "1 2 21\r\n"
				+ "2 4 46\r\n" + "2 6 25\r\n" + "3 4 34\r\n" + "4 6 51\r\n" + "5 3 18\r\n" + "5 4 40\r\n";
		BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(input.getBytes())));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		// 각 정점별로 리스트를 하나씩 가지고 있어야하고
		adj = new ArrayList[N];
		// 각 리스트에는 도착정점+경로비용의 정보가 들어있어야함
		for (int i = 0; i < N; i++) {
			adj[i] = new ArrayList<>();
		}
		for (int i = 0; i < K; i++) {
			st = new StringTokenizer(br.readLine());
			int n1 = Integer.parseInt(st.nextToken());
			int n2 = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			adj[n1].add(new Node(n2, w));
			adj[n2].add(new Node(n1, w));
		}
		//정점을 선택한다는 것은 해당 정점으로부터 뻗어나가는 모든 간선을 우선순위 큐에 떄려 박는 것
		PriorityQueue<Node> pq = new PriorityQueue<>();
		boolean [] visited = new boolean[N];
		int cnt = 1;
		visited[0] = true;
		pq.addAll(adj[0]);//오른쪽에 있는 원소 다 넣는 방법
		while(cnt<N) {
			//가장 작은 비용의 간선
			Node e = pq.poll();
			//이미 확보된 정점이 도착지면 패스
			if(visited[e.dic])
				continue;
			//e.dic 목적지 간선을 선택
			pq.addAll(adj[e.dic]);
			visited[e.dic] = true;
			cnt++;
			result += e.cost;
		}
	}
}
