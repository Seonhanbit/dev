package D4;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class s_1861_정사각형방 {
	static int N;
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };
	static int[][] arr = null;
	static boolean[][] ck_arr = null;
	static int cnt = 0;
	static int value=0;

	public static boolean range(int x, int y) {
		if (x >= 0 && x < N && y >= 0 && y < N)
			return true;
		else
			return false;
	}

	public static class XY {
		int x;
		int y;

		XY(int a, int b) {
			this.x = a;
			this.y = b;
		}
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			N = Integer.parseInt(br.readLine());
			arr = new int[N][N];
			ck_arr = new boolean[N][N];
			cnt=Integer.MIN_VALUE;
			value=0;
			for (int i = 0; i < N; i++) {
				StringTokenizer st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					arr[i][j] = Integer.parseInt(st.nextToken());
				}
			}

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					bfs(i, j);
				}
			}

			System.out.println("#" + " " + tc);
		}
	}

	public static void bfs(int x, int y) {
		Queue<XY> queue = new LinkedList<XY>();
		queue.add(new XY(x, y));
		ck_arr[x][y] = true;
		int ncnt=0;
		while (!queue.isEmpty()) {
			XY temp = queue.poll();
			for (int k = 0; k < 4; k++) {
				int nx = temp.x + dx[k], ny = temp.y + dy[k];
				if (!range(nx, ny))
					continue;
				if (arr[nx][ny] != (arr[temp.x][temp.y] + 1))
					continue;
				queue.add(new XY(nx,ny));
				ck_arr[nx][ny] = true;
			}
			ncnt++;
			if(ncnt>cnt)
				cnt=ncnt;
			
		}
	}

}
