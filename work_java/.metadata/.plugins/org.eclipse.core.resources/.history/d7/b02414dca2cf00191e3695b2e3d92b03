package D4;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class s_1949_등산로조성 {
	static int N;
	static int K;
	static int[][] arr;
	static boolean[][] ck_arr;
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };
	static int res = 0;

	static boolean range(int x, int y) {
		if (x >= 0 && x < N && y >= 0 && y < N)
			return true;
		else
			return false;
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			K = Integer.parseInt(st.nextToken());
			arr = new int[N][N];
			ck_arr = new boolean[N][N];
			int max = Integer.MIN_VALUE;
			res = 0;
			int max_cnt = Integer.MIN_VALUE;
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					arr[i][j] = Integer.parseInt(st.nextToken());
					if (arr[i][j] > max)
						max = arr[i][j];
				}
			}

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (arr[i][j] == max) {
						dfs(i, j, 1);
						if (res > max_cnt)
							max_cnt = res;
					}
				}
			}
			int su = N * N;
			while (su != 0) {
				int ni = 0;
				int nj = 0;
				boolean flag = false;
				for (int i = 0; i < N; i++) {
					for (int j = 0; j < N; j++) {
						if (!ck_arr[i][j]) {
							arr[i][j] -= K;
							ck_arr[i][j] = true;
							flag = true;
							ni = i;
							nj = j;
							break;
						}
					}
					if (flag)
						break;
				}
				for (int i = 0; i < N; i++) {
					for (int j = 0; j < N; j++) {
						System.out.print(arr[i][j]+" ");
					}System.out.println();
				}
				System.out.println("=====================");
				for (int i = 0; i < N; i++) {
					for (int j = 0; j < N; j++) {
						if (arr[i][j] == max) {
							dfs(i, j, 1);
						}
					}
				}
				arr[ni][nj] += K;
				su--;
			}

			System.out.println("#" + tc + " " + res);
		}
	}

	static class XY {
		int x;
		int y;
		int cnt;

		XY(int x, int y, int cnt) {
			this.x = x;
			this.y = y;
			this.cnt = cnt;
		}
	}

	static void bfs(int x, int y, int cnt) {
		Queue<XY> queue = new LinkedList<>();
		queue.add(new XY(x, y, cnt));
		while (!queue.isEmpty()) {
			XY tmp = new XY(x, y, cnt);
			for (int i = 0; i < 4; i++) {
				int nx = tmp.x + dx[i], ny = tmp.y + dy[i];
				if (!range(nx, ny))
					continue;
				if (arr[x][y] <= arr[nx][ny])
					continue;
				queue.add(new XY(nx, ny, cnt + 1));
			}
		}
	}

	static void dfs(int x, int y, int cnt) {
		if (cnt > res)
			res = cnt;
		System.out.println(arr[x][y]);
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i], ny = y + dy[i];
			if (!range(nx, ny) || arr[x][y] <= arr[nx][ny])
				continue;
			dfs(nx, ny, cnt + 1);
		}
	}

}
