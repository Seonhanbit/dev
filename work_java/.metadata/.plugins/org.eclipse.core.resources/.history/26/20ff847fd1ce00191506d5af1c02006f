package D4;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.StringTokenizer;

public class s_7699_수지의수지맞는여행 {
	static int R;
	static int C;
	static char[][] arr = null;
	static int[] dr = { -1, 1, 0, 0 };
	static int[] dc = { 0, 0, -1, 1 };
	static int res;
	static boolean[][] ck_arr=null;
	static HashSet<Character> hs = new HashSet<>();

	public static boolean range(int x, int y) {
		if (x >= 0 && x < R && y >= 0 && y < C)
			return true;
		else
			return false;
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			R = Integer.parseInt(st.nextToken());
			C = Integer.parseInt(st.nextToken());
			arr = new char[R][C];
			ck_arr = new boolean[R][C];
			res = Integer.MIN_VALUE
			for (int i = 0; i < R; i++) {
				arr[i] = br.readLine().toCharArray();
			}
			for (int i = 0; i < R; i++) {
				for (int j = 0; j < C; j++) {
					dfs(i,j,1);
				}
			}

			System.out.println("#" + tc + " "+res);
		}
	}

	public static void dfs(int x, int y, int cnt) {
		ck_arr[x][y]=true;
		hs.add(arr[x][y]);
		for (int i = 0; i < 4; i++) {
			int nx = x + dr[i], ny = y + dc[i];
			if (!range(nx, ny))
				continue;
			if(!ck_arr[nx][ny])
				continue;
			if(arr[x][y]==arr[nx][ny])
				continue;
			if(!hs.add(arr[x][y]))
				continue;
			ck_arr[nx][ny]=true;
			dfs(nx, ny, cnt + 1);
		}
		if(cnt>res)
			res = cnt;
	}
}
